#include <cstdlib>
#include "function.h"
#include "search.h"
#include <math.h>
#include <iostream>

template<typename T>
class SinFunction : public Function<int, int>{
public:
  virtual int invoke(int arg){
    return 10000000 * (sin(arg/100000.0) - 0.5);
  }
};

template<typename T>
class LinearFunction : public Function<int, int>{
public:
  virtual int invoke(int arg){
    return 6 * arg + 17;
  }
};

template<typename T>
class BoundaryFunction : public Function<int, int>{
public:
  virtual int invoke(int arg){
    return 2 * arg - 3;
  }
};
int main(void){
  SinFunction<int> * sf = new SinFunction<int>();
  int x = binarySearchForZero(sf, 0, 150000);
  std::cout << "SinFunction from 0 to 150000, the value of x which f(x) is cloest to 0 is: " << x << std::endl;
  delete sf;
  LinearFunction<int> * lf = new LinearFunction<int>();
  int y = binarySearchForZero(lf, -100, 100);
  std::cout << "LinearFunction from -100 to 100, the value of x which f(x) is cloest to 0 is: " << y << std::endl;
  delete lf;
  BoundaryFunction<int> * bf = new BoundaryFunction<int>();
  int z = binarySearchForZero(bf, -50, 0);
  std::cout << "BoundaryFunction from -50 to 50, the value of x which f(x) is cloest to 0 is: "<< z << std::endl;
  delete bf;
  return EXIT_SUCCESS;
}
